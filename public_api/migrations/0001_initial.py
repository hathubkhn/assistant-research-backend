# Generated by Django 5.2 on 2025-06-08 08:38

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Conference',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('abbreviation', models.CharField(blank=True, max_length=50)),
                ('rank', models.CharField(blank=True, max_length=10)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'conference',
            },
        ),
        migrations.CreateModel(
            name='Journal',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('abbreviation', models.CharField(blank=True, max_length=50)),
                ('impact_factor', models.FloatField(blank=True, null=True)),
                ('quartile', models.CharField(blank=True, max_length=10)),
                ('publisher', models.CharField(blank=True, max_length=255)),
                ('url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'journal',
            },
        ),
        migrations.CreateModel(
            name='Paper',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=500)),
                ('abstract', models.TextField()),
                ('doi', models.CharField(blank=True, max_length=200, null=True)),
                ('publication_date', models.DateField(blank=True, null=True)),
                ('conference', models.CharField(blank=True, max_length=255)),
                ('file_format', models.CharField(choices=[('pdf', 'PDF'), ('docx', 'DOCX'), ('doc', 'DOC'), ('txt', 'TXT'), ('html', 'HTML')], default='pdf', max_length=20)),
                ('pdf_file', models.FileField(blank=True, null=True, upload_to='papers')),
                ('url', models.URLField()),
                ('pdf_url', models.URLField()),
                ('github_url', models.URLField(blank=True, null=True)),
                ('crawled_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('keywords', models.JSONField(default=list)),
                ('tasks', models.CharField(blank=True, max_length=100)),
                ('method', models.TextField(blank=True)),
                ('results', models.TextField(blank=True)),
                ('conclusions', models.TextField(blank=True)),
                ('bibtex', models.TextField(blank=True)),
                ('download_count', models.IntegerField(default=0)),
                ('views_count', models.IntegerField(default=0)),
                ('citations_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('conference_venue', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='papers', to='public_api.conference')),
                ('journal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='papers', to='public_api.journal')),
                ('references', models.ManyToManyField(related_name='referenced_papers', to='public_api.paper')),
            ],
            options={
                'db_table': 'papers',
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('data_type', models.CharField(blank=True, max_length=100)),
                ('size', models.CharField(blank=True, max_length=50)),
                ('format', models.CharField(blank=True, max_length=50)),
                ('source_url', models.URLField(blank=True)),
                ('license', models.CharField(blank=True, max_length=100)),
                ('citation', models.TextField(blank=True)),
                ('link', models.URLField(blank=True)),
                ('subtitle', models.TextField(blank=True)),
                ('paper_link', models.URLField(blank=True)),
                ('thumbnail_url', models.URLField(blank=True)),
                ('language', models.CharField(blank=True, max_length=100)),
                ('abbreviation', models.CharField(blank=True, max_length=100)),
                ('paper_count', models.IntegerField(blank=True, null=True)),
                ('benchmarks', models.JSONField(blank=True, default=list, null=True)),
                ('tasks', models.JSONField(blank=True, default=list, null=True)),
                ('dataloaders', models.JSONField(blank=True, default=list, null=True)),
                ('dataset_papers', models.JSONField(blank=True, default=list, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('similar_datasets', models.ManyToManyField(blank=True, related_name='related_to', to='public_api.dataset')),
                ('papers', models.ManyToManyField(blank=True, related_name='datasets', to='public_api.paper')),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=200)),
                ('affiliation', models.CharField(max_length=200)),
                ('bio', models.TextField()),
                ('google_scholar_url', models.URLField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('papers', models.ManyToManyField(related_name='authors', to='public_api.paper')),
            ],
            options={
                'db_table': 'authors',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(blank=True, max_length=255)),
                ('faculty_institute', models.CharField(blank=True, max_length=255)),
                ('school', models.CharField(blank=True, max_length=100, null=True)),
                ('position', models.CharField(blank=True, max_length=100)),
                ('google_scholar_link', models.URLField(blank=True, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('research_interests', models.TextField(blank=True, null=True)),
                ('additional_keywords', models.TextField(blank=True, null=True)),
                ('avatar_url', models.URLField(blank=True, null=True)),
                ('is_profile_completed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='public_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_profile',
            },
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=500)),
                ('authors', models.TextField()),
                ('abstract', models.TextField(blank=True)),
                ('venue', models.CharField(blank=True, max_length=255)),
                ('year', models.IntegerField()),
                ('url', models.URLField(blank=True)),
                ('doi', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='public_publications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DatasetSimilarDataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similar_dataset_relations', to='public_api.dataset')),
                ('to_dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_by_dataset_relations', to='public_api.dataset')),
            ],
            options={
                'db_table': 'dataset_similar_datasets',
                'unique_together': {('from_dataset', 'to_dataset')},
            },
        ),
        migrations.CreateModel(
            name='InterestingDataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interested_users', to='public_api.dataset')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='public_interesting_datasets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'dataset')},
            },
        ),
        migrations.CreateModel(
            name='InterestingPaper',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='public_interesting_papers', to=settings.AUTH_USER_MODEL)),
                ('paper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interested_users', to='public_api.paper')),
            ],
            options={
                'unique_together': {('user', 'paper')},
            },
        ),
        migrations.CreateModel(
            name='DownloadedPaper',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='public_downloaded_papers', to=settings.AUTH_USER_MODEL)),
                ('paper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='downloaded_users', to='public_api.paper')),
            ],
            options={
                'unique_together': {('user', 'paper')},
            },
        ),
    ]
