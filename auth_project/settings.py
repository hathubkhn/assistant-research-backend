"""
Django settings for auth_project project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from environs import Env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = Env()
env.read_env()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY', default="django-insecure-lfa7$(r+vxjd7tq7-q77@bh-619y%n2+fu5(1riq0aww033e8$")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=True)

ALLOWED_HOSTS = env.str('ALLOWED_HOSTS', default='localhost,127.0.0.1,0.0.0.0,202.191.56.91,www.google.com').split(',')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # Third party apps
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    "social_django",
    "drf_yasg",
    
    # Django AllAuth
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.microsoft',
    
    # Local apps
    "public_api",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # AllAuth middleware
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "auth_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "social_django.context_processors.backends",
                "social_django.context_processors.login_redirect",
                # Django AllAuth context processors
                "django.template.context_processors.request",
            ],
        },
    },
]

WSGI_APPLICATION = "auth_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Always use PostgreSQL with Database URL configuration
DATABASES = {
    "default": {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env.str('POSTGRES_DB'),
        'USER': env.str('POSTGRES_USER'),
        'PASSWORD': env.str('POSTGRES_PASSWORD'),
        'HOST': env.str('POSTGRES_HOST'),
        'PORT': env.str('POSTGRES_PORT'),
    }
}

# No longer need database routers since we're using a single database
# DATABASE_ROUTERS = ['auth_project.db_router.AuthRouter']


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# URL slash handling
APPEND_SLASH = False

# CORS settings
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://staging-ai-research.hust.edu.vn",
    "https://staging-ai-research.hust.edu.vn",
    "http://be-staging-ai-research.hust.edu.vn",
    "https://be-staging-ai-research.hust.edu.vn",
]

# Allow all headers and methods in development
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}

# Authentication backends
AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.microsoft.MicrosoftOAuth2',
    'django.contrib.auth.backends.ModelBackend',
    # AllAuth backend
    'allauth.account.auth_backends.AuthenticationBackend',
)

# Django AllAuth settings
SITE_ID = 1

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': env.str('GOOGLE_CLIENT_ID', default='your-google-client-id'),
            'secret': env.str('GOOGLE_CLIENT_SECRET', default='your-google-client-secret'),
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
    'microsoft': {
        'APP': {
            'client_id': env.str('MICROSOFT_CLIENT_ID', default='your-microsoft-client-id'),
            'secret': env.str('MICROSOFT_CLIENT_SECRET', default='your-microsoft-client-secret'),
            'key': '',
            'tenant': 'common',
        },
        'SCOPE': [
            'profile',
            'email',
            'openid',
        ],
    }
}

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https' if not DEBUG else 'http'

# Existing social auth settings
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = env.str('GOOGLE_CLIENT_ID', default='your-google-key')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = env.str('GOOGLE_CLIENT_SECRET', default='your-google-secret')

SOCIAL_AUTH_MICROSOFT_OAUTH2_KEY = env.str('MICROSOFT_CLIENT_ID', default='your-microsoft-key')
SOCIAL_AUTH_MICROSOFT_OAUTH2_SECRET = env.str('MICROSOFT_CLIENT_SECRET', default='your-microsoft-secret')

LOGIN_URL = '/api/login/'
LOGIN_REDIRECT_URL = '/api/signup/'
LOGOUT_REDIRECT_URL = '/api/login/'

# Frontend URL for redirects
FRONTEND_URL = env.str('FRONTEND_URL', default='http://localhost:3000')

# API URL for redirects and callbacks
API_URL = env.str('API_URL', default='http://localhost:8000')

# Media files configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Azure OpenAI API configuration
AZURE_OPENAI_API_KEY = env.str('AZURE_OPENAI_API_KEY', '')
AZURE_OPENAI_ENDPOINT = env.str('AZURE_OPENAI_ENDPOINT', '')
AZURE_OPENAI_API_VERSION = env.str('AZURE_OPENAI_API_VERSION', '2023-05-15')
AZURE_OPENAI_DEPLOYMENT_NAME = env.str('AZURE_OPENAI_DEPLOYMENT_NAME', 'gpt-4')

# Maximum upload file size (5MB)
DATA_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024

# Update URLs to serve media files in development
if DEBUG:
    from django.conf.urls.static import static
    MIDDLEWARE += ['django.middleware.security.SecurityMiddleware']
    urlpatterns = static(MEDIA_URL, document_root=MEDIA_ROOT)

# CSRF settings for cross-origin requests
CSRF_COOKIE_SAMESITE = 'None'  # Required for cross-origin requests in production
CSRF_COOKIE_SECURE = True  # Only send cookie over HTTPS
CSRF_COOKIE_HTTPONLY = False  # Must be False to allow JavaScript access
SESSION_COOKIE_SAMESITE = 'None'  # Required for cross-origin requests in production 
SESSION_COOKIE_SECURE = True  # Only send cookie over HTTPS
CSRF_USE_SESSIONS = True  # Store CSRF token in session for better security
CSRF_TRUSTED_ORIGINS = [env.str('FRONTEND_URL', default='http://localhost:3000')]


PAPER_PDF_DIR='papers'
